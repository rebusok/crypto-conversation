{"version":3,"sources":["components/Result/Result.module.css","services/api/api.ts","App/styles.ts","services/api/constants.ts","Store/AppReducer.ts","helpers/helper.ts","Store/app-saga.ts","components/Result/Result.tsx","components/ConverterBlock/styles.ts","components/ConverterBlock/ConverterBlock.tsx","components/CryptoTable/styles.ts","components/CryptoTable/CryptoTable.tsx","App/App.tsx","Store/store.ts","index.tsx"],"names":["module","exports","CurrencyType","useStyles","makeStyles","theme","createStyles","root","padding","spacing","configOMB","baseURL","withCredentials","axiosInstance","axios","create","RequestStatusType","Api","initCurrency","limit","get","params","tsym","firstValue","secondValue","fsyms","tsyms","initialState","status","SUCCESS","error","isInitialized","detailsInformation","table","initinalCurrency","setStatusApp","type","setErrorApp","setFetchTableData","value","baseUrlImg","pipe","length","replace","createCurrentObject","data","fromCurrentValue","Object","keys","DISPLAY","toCurrentValue","displayObject","Raw","RAW","imgUrl","IMAGEURL","undefined","PRICE","CHANGE24HOUR","FROMSYMBOL","TOSYMBOL","price","fromSymbol","toSymbol","change24","displayPrice","createCurrentObjectWithTable","Data","map","el","ind","USD","changeIndicator","changeValue","name","CoinInfo","FullName","change24h","fetchDataSaga","fetchDataWithTableSaga","initinalSaga","appWatcherSaga","action","call","put","LOADING","curentsDataObject","message","selectTable","state","convert","select","oldData","console","log","currentArrayForStore","INIT_CUR","initinalTypeCurrency","takeEvery","Result","memo","useSelector","loading","arrowIndicator","useMemo","numberChange","split","className","styles","card","logo","Typography","display","alt","src","variant","color","paper","textAlign","palette","text","secondary","cryptoInputBox","marginBottom","marginTop","currencyInput","width","marginLeft","currencyType","minWidth","ConverterBlock","useState","fromSelected","setFromSelected","toSelected","setToSelected","dispatch","useDispatch","fromValue","setFromValue","toValue","setToValue","classes","currencyList","useEffect","handleChangeInput","e","target","id","currentTarget","Paper","FormControl","InputLabel","Select","labelId","label","onChange","MenuItem","TextField","currencyIcon","height","borderRadius","redColumn","backgroundColor","greenColumn","rowCurrency","cursor","CryptoTable","items","TableContainer","component","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","coin","hover","clsx","App","intervalId","setInterval","clearInterval","Container","maxWidth","Grid","container","item","xs","rootWatcher","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","all","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a251f54c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Result_logo__1_Pgf\",\"card\":\"Result_card__2QPSg\"};","import {BASE_URL} from \"./constants\";\r\nimport axios from \"axios\";\r\nimport {DataEntity} from \"./api.types\";\r\n\r\nconst configOMB = {\r\n    baseURL: BASE_URL,\r\n    withCredentials:true,\r\n\r\n};\r\n\r\nconst axiosInstance = axios.create(configOMB);\r\n\r\nexport enum CurrencyType  {\r\n    USD = 'USD',\r\n    EUR = 'EUR',\r\n    CHF = 'CHF',\r\n    GBP = 'GBP',\r\n    RUB = 'RUB',\r\n    BTC = 'BTC',\r\n    ETH = 'ETH',\r\n    SOL = 'SOL',\r\n    AXS = 'AXS',\r\n    XRP = 'XRP',\r\n    OMG = 'OMG',\r\n}\r\n\r\nexport type PartialRecord<K extends string | number | symbol, T> = { [P in K]?: T; };\r\n\r\nexport const Api = {\r\n    getDataWithCurrency: (initCurrency: string = 'USD', limit:number = 10) => {\r\n        return axiosInstance.get<DataEntity<any>>('top/totalvolfull' ,{params: {tsym: initCurrency, limit}})\r\n    },\r\n    getData: <K extends string | number | symbol>(firstValue: string, secondValue: string )=> {\r\n        return axiosInstance.get<DataEntity<K>>('pricemultifull', {params: {fsyms: firstValue, tsyms:secondValue}})\r\n    }\r\n\r\n}\r\n","import { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            padding: theme.spacing(10),\r\n        },\r\n    }),\r\n);\r\n\r\n","const BASE_URL = 'https://min-api.cryptocompare.com/data/'\r\n\r\n\r\nexport {\r\n    BASE_URL\r\n}\r\n","import {ObjectForStore, ObjectForStoreWithTable} from \"../services/api/api.types\";\r\n\r\nexport enum RequestStatusType {\r\n    LOADING = 'loading',\r\n    SUCCESS = 'succeeded',\r\n    FAIL = 'failed'\r\n}\r\n\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    error: null | string\r\n    isInitialized: boolean\r\n    detailsInformation: null | ObjectForStore\r\n    table: ObjectForStoreWithTable[]\r\n    initinalCurrency: string[]\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    status: RequestStatusType.SUCCESS,\r\n    error: null,\r\n    isInitialized: false,\r\n    detailsInformation: null,\r\n    table: [],\r\n    initinalCurrency: [],\r\n}\r\n\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIAL-APP':\r\n            return {...state, isInitialized: action.value}\r\n        case \"APP/RESULT\":\r\n            return {...state, detailsInformation: action.value}\r\n        case \"APP/FETCH_DATA_TABLE\" :\r\n            return {...state, table: action.value}\r\n        case \"APP/FETCH_INITINAL_DATA_TYPE_CURRENCY\":\r\n            return {...state, initinalCurrency: [...action.value]}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setStatusApp = (status: RequestStatusType) => {\r\n    return ({type: 'APP/SET-STATUS', status} as const)\r\n}\r\nexport const setErrorApp = (error: null | string) => {\r\n    return ({type: 'APP/SET-ERROR', error} as const)\r\n}\r\nexport const setIsInitializedAC = (value: boolean) => {\r\n    return ({type: 'APP/SET-INITIAL-APP', value} as const)\r\n}\r\nexport const setFetchData = (value: ObjectForStore) => {\r\n    return ({type: 'APP/RESULT', value} as const)\r\n}\r\nexport const setFetchTableData = (value: ObjectForStoreWithTable[]) => {\r\n    return ({type: 'APP/FETCH_DATA_TABLE', value} as const)\r\n}\r\nexport const setInitialCurrency = (value: string[]) => {\r\n    return ({type: 'APP/FETCH_INITINAL_DATA_TYPE_CURRENCY', value} as const)\r\n}\r\n\r\nexport type SetAppStatusActionType = ReturnType<typeof setStatusApp>\r\nexport type SetAppErrorActionType = ReturnType<typeof setErrorApp>\r\nexport type SetAppInitialActionType = ReturnType<typeof setIsInitializedAC>\r\nexport type SetAppResultActionType = ReturnType<typeof setFetchData>\r\nexport type SetAppFetchDataTableActionType = ReturnType<typeof setFetchTableData>\r\nexport type SetAppFetchInitinalCurrencyActionType = ReturnType<typeof setInitialCurrency>\r\n\r\ntype ActionsType = SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | SetAppInitialActionType\r\n    | SetAppResultActionType\r\n    | SetAppFetchDataTableActionType\r\n    | SetAppFetchInitinalCurrencyActionType\r\n","import pipe from \"lodash/fp/pipe\";\r\nimport {DataEntity, DataTypes, ObjectForStore, ObjectForStoreWithTable} from \"../services/api/api.types\";\r\nimport {CurrencyType} from \"../services/api/api\";\r\n\r\nexport const floatNumber = (value: string) => {\r\n    if (!value.length) {\r\n        return ''\r\n    }\r\n\r\n    return value\r\n        .replace(',', '.')\r\n        .replace(/[^\\d.-]/g, '')\r\n        .replace(/^\\.(.?)/, '0.$1')\r\n        .replace(/(\\d+(\\.\\d*)?).*/, '$1')\r\n}\r\n\r\nexport const separateRegister = (value: string) => value ? value.replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1 ') : value\r\n\r\nexport const formatPrice = pipe(\r\n    (value:string) => `${value}`,\r\n    floatNumber,\r\n    separateRegister\r\n)\r\n\r\nconst baseUrlImg = 'https://www.cryptocompare.com/'\r\nexport const createCurrentObject = (data: DataEntity<any>): ObjectForStore | null => {\r\n\r\n    const fromCurrentValue = Object.keys(data.DISPLAY)[0] as CurrencyType\r\n    const toCurrentValue = Object.keys(data.DISPLAY[fromCurrentValue])[0] as CurrencyType\r\n    const displayObject = data.DISPLAY[fromCurrentValue][toCurrentValue]\r\n    const Raw = data.RAW?.[fromCurrentValue][toCurrentValue]\r\n    if(displayObject && Raw) {\r\n        const imgUrl = displayObject.IMAGEURL ? `${baseUrlImg}${displayObject.IMAGEURL}`: undefined\r\n        const {PRICE, CHANGE24HOUR, FROMSYMBOL, TOSYMBOL} = displayObject\r\n        return {\r\n            price: Raw.PRICE,\r\n            imgUrl,\r\n            fromSymbol: FROMSYMBOL,\r\n            toSymbol: TOSYMBOL,\r\n            fromCurrentValue,\r\n            toCurrentValue,\r\n            change24: CHANGE24HOUR,\r\n            displayPrice: PRICE,\r\n        }\r\n    }\r\n   return null\r\n}\r\nexport const createCurrentObjectWithTable = (data: DataTypes<'USD'>, price?: ObjectForStoreWithTable[]): ObjectForStoreWithTable[] | undefined  => {\r\n    return data.Data?.map((el, ind) => {\r\n        return {\r\n            price: el.RAW?.USD.PRICE,\r\n            imgUrl: `${baseUrlImg}${el.RAW?.USD.IMAGEURL}`,\r\n            displayPrice: el.DISPLAY.USD.PRICE,\r\n            fromSymbol: el.DISPLAY.USD.FROMSYMBOL,\r\n            changeIndicator: price && price[ind].price ? price[ind].price - el.RAW.USD.PRICE > 0 : undefined,\r\n            changeValue: price && price[ind].price ? price[ind].price - el.RAW.USD.PRICE : undefined,\r\n            name: el.CoinInfo.FullName,\r\n            change24h: el.DISPLAY.USD.CHANGE24HOUR,\r\n        }\r\n    })\r\n\r\n}\r\n","import {Api, CurrencyType} from \"../services/api/api\";\r\nimport {\r\n    RequestStatusType,\r\n    setErrorApp,\r\n    setFetchData,\r\n    setFetchTableData,\r\n    setInitialCurrency,\r\n    setStatusApp\r\n} from \"./AppReducer\";\r\nimport {call, put, select, takeEvery} from \"redux-saga/effects\";\r\nimport {DataEntity, DataTypes, ObjectForStoreWithTable} from \"../services/api/api.types\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {createCurrentObject, createCurrentObjectWithTable} from \"../helpers/helper\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\n\r\nexport function* fetchDataSaga(action: ReturnType<typeof fetchData>) {\r\n\r\n    const {data}: AxiosResponse<DataEntity<CurrencyType>> = yield call(Api.getData, action.firstValue, action.secondValue)\r\n    yield put(setStatusApp(RequestStatusType.LOADING))\r\n    const curentsDataObject = createCurrentObject(data)\r\n\r\n    try {\r\n        if (curentsDataObject) {\r\n            yield put(setFetchData(curentsDataObject));\r\n        } else {\r\n\r\n        }\r\n    } catch (e:any) {\r\n        yield put(setErrorApp(e.message))\r\n    } finally {\r\n        yield  put(setStatusApp(RequestStatusType.SUCCESS))\r\n\r\n    }\r\n}\r\n\r\nexport function* fetchDataWithTableSaga () {\r\n    const {data}: AxiosResponse<DataTypes<'USD'>> = yield call(Api.getDataWithCurrency)\r\n    const selectTable = (state: AppRootStateType) => state.convert.table\r\n    const oldData:ObjectForStoreWithTable[] = yield select(selectTable)\r\n    yield put(setStatusApp(RequestStatusType.LOADING))\r\n    console.log('oldData', oldData)\r\n    const currentArrayForStore = createCurrentObjectWithTable(data, oldData)\r\n    console.log('currentArrayForStore', currentArrayForStore)\r\n    try {\r\n        if (currentArrayForStore) {\r\n            yield put(setFetchTableData(currentArrayForStore));\r\n        } else {\r\n\r\n        }\r\n    } catch (e:any) {\r\n        yield put(setErrorApp(e.message))\r\n    } finally {\r\n        yield  put(setStatusApp(RequestStatusType.SUCCESS))\r\n\r\n    }\r\n}\r\n\r\nexport function* initinalSaga() {\r\n    const {data}: AxiosResponse<DataTypes<'USD'>> = yield call(Api.getDataWithCurrency)\r\n    yield put(setStatusApp(RequestStatusType.LOADING))\r\n    const INIT_CUR = ['USD', 'EUR', 'CHF', 'GBP', 'RUB']\r\n    const initinalTypeCurrency = data.Data?.map(el => {\r\n        return el.RAW.USD.FROMSYMBOL\r\n    })\r\n    console.log(initinalTypeCurrency)\r\n    console.log(data)\r\n    const currentArrayForStore = createCurrentObjectWithTable(data)\r\n    try {\r\n        if (currentArrayForStore && initinalTypeCurrency && initinalTypeCurrency.length) {\r\n            yield put(setInitialCurrency([...INIT_CUR, ...initinalTypeCurrency]))\r\n            yield put(setFetchTableData(currentArrayForStore));\r\n        } else {\r\n\r\n        }\r\n    } catch (e:any) {\r\n        yield put(setErrorApp(e.message))\r\n    } finally {\r\n        yield  put(setStatusApp(RequestStatusType.SUCCESS))\r\n\r\n    }\r\n}\r\n\r\nexport const fetchDataWithTable = () => {\r\n    return {type: 'APP/FETCH_DATA_WITH_TABLE'}\r\n}\r\n\r\nexport const fetchData = (firstValue: string,secondValue: string) => {\r\n    return {type: 'APP/FETCH_DATA', firstValue, secondValue}\r\n}\r\nexport const initinalFetchData = () => {\r\n    return {type: 'APP/INITINAL_FETCH_DATA'}\r\n}\r\n\r\nexport function* appWatcherSaga() {\r\n    yield takeEvery('APP/FETCH_DATA', fetchDataSaga)\r\n    yield takeEvery('APP/FETCH_DATA_WITH_TABLE', fetchDataWithTableSaga)\r\n    yield takeEvery('APP/INITINAL_FETCH_DATA', initinalSaga)\r\n\r\n}\r\n","import React, {memo, useMemo} from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../Store/store\";\r\nimport {RequestStatusType} from \"../../Store/AppReducer\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport styles from './Result.module.css'\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\n\r\nconst Result = memo((): JSX.Element => {\r\n    const detailsInformation = useSelector((state: AppRootStateType) => state.convert.detailsInformation)\r\n    const loading = useSelector((state: AppRootStateType) => state.convert.status)\r\n\r\n    const arrowIndicator = useMemo(() => {\r\n        if(detailsInformation && detailsInformation.change24) {\r\n            const numberChange = detailsInformation.change24.split(' ')[1]\r\n            console.log(numberChange)\r\n            if(+numberChange > 0) {\r\n                return true\r\n            }\r\n            if(+numberChange < 0) {\r\n                return false\r\n            }\r\n\r\n        }\r\n    }, [detailsInformation])\r\n\r\n    if (loading === RequestStatusType.LOADING) {\r\n        return <div>load</div>\r\n    }\r\n\r\n    return (\r\n        <div className={styles.card}>\r\n            {detailsInformation && (\r\n                <>\r\n                    <div className={styles.logo}>\r\n                        <Typography\r\n                            display={'inline'}>1 {detailsInformation.fromCurrentValue} ({detailsInformation.fromSymbol}) </Typography>\r\n                        <img alt={'img'} src={detailsInformation.imgUrl}/>\r\n                    </div>\r\n                    <Typography variant={'h4'}>{detailsInformation.displayPrice}</Typography>\r\n                    <Typography variant={'body2'}>\r\n                        Изменения за 24 часа: {detailsInformation.change24}\r\n                        {arrowIndicator ? <ArrowUpwardIcon color={'primary'}/> : <ArrowDownwardIcon color={'error'}/>}\r\n                    </Typography>\r\n                </>\r\n            )}\r\n\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Result;\r\n","import { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        paper: {\r\n            padding: theme.spacing(2),\r\n            textAlign: 'center',\r\n            color: theme.palette.text.secondary,\r\n        },\r\n        cryptoInputBox: {\r\n            marginBottom: 20,\r\n            marginTop: 20,\r\n        },\r\n        currencyInput: {\r\n            width: 'calc(70% - 10px)',\r\n            marginLeft: 10,\r\n        },\r\n        currencyType: {\r\n            minWidth: '30%',\r\n        },\r\n    }),\r\n);\r\n\r\nexport default useStyles;\r\n","import React, {ChangeEvent, memo, useEffect, useState} from 'react';\r\nimport {FormControl, InputLabel, MenuItem, Paper, Select, TextField} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {fetchData} from \"../../Store/app-saga\";\r\nimport {AppRootStateType} from \"../../Store/store\";\r\nimport Result from \"../Result/Result\";\r\nimport useStyles from \"./styles\";\r\nimport {RequestStatusType} from \"../../Store/AppReducer\";\r\n\r\n\r\nconst ConverterBlock = memo((): JSX.Element => {\r\n    const [fromSelected, setFromSelected] = useState<string >('')\r\n    const [toSelected, setToSelected] = useState<string>('')\r\n    const dispatch = useDispatch()\r\n    const [fromValue, setFromValue] = useState<string | number>('')\r\n    const [toValue, setToValue] = useState<string | number>('')\r\n    const classes = useStyles();\r\n    const currencyList = useSelector((state: AppRootStateType) => state.convert.initinalCurrency)\r\n    const loading = useSelector((state: AppRootStateType) => state.convert.status)\r\n\r\n    const handleChangeFrom = (e: React.ChangeEvent<{ name?: string; value: unknown }>) => {\r\n        setFromSelected(e.target.value as string)\r\n    }\r\n    const handleChangeTo = (e: React.ChangeEvent<{ name?: string; value: unknown }>) => {\r\n        setToSelected(e.target.value as string)\r\n    }\r\n    const detailsInformation = useSelector((state:AppRootStateType) => state.convert.detailsInformation)\r\n\r\n    useEffect(() => {\r\n        if(fromSelected && toSelected) {\r\n            dispatch(fetchData(fromSelected, toSelected))\r\n        }\r\n    },[fromSelected, toSelected, dispatch])\r\n\r\n    useEffect(() => {\r\n        if(detailsInformation) {\r\n            if(fromValue){\r\n                setToValue(detailsInformation.price * +fromValue)\r\n                return\r\n            }\r\n            if(toValue) {\r\n                setFromValue(+toValue / detailsInformation.price)\r\n                return;\r\n            }\r\n            setFromValue(1)\r\n            setToValue(detailsInformation.price)\r\n\r\n\r\n        }\r\n    }, [detailsInformation])\r\n\r\n    const handleChangeInput = (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n        if(e.target.id === 'from' && detailsInformation) {\r\n            const value = e.currentTarget.value\r\n            if(!value) {\r\n                setFromValue('')\r\n                setToValue('')\r\n                return\r\n            }\r\n            setFromValue(value)\r\n            setToValue(+value * detailsInformation.price )\r\n        }\r\n        if(e.target.id === 'to' && detailsInformation) {\r\n            const value = e.currentTarget.value\r\n            if(!value) {\r\n                setToValue('')\r\n                setFromValue('')\r\n                return\r\n            }\r\n            setToValue(value)\r\n            setFromValue( +value / detailsInformation.price )\r\n        }\r\n    }\r\n\r\n    if (loading === RequestStatusType.LOADING && !currencyList.length) {\r\n        return <div>load</div>\r\n    }\r\n\r\n    return (\r\n        <Paper className={classes.paper}>\r\n            <div className={classes.cryptoInputBox}>\r\n                <FormControl className={classes.currencyType} variant='outlined'>\r\n                    <InputLabel id=\"grouped-select\">Type</InputLabel>\r\n                    <Select\r\n                        labelId=\"grouped-select\"\r\n                        label={'Type'}\r\n                        value={fromSelected}\r\n                        onChange={handleChangeFrom}\r\n                    >\r\n                        <MenuItem value=\"\">\r\n                            <em/>\r\n                        </MenuItem>\r\n                        {currencyList.map(el =>\r\n                            (\r\n                                <MenuItem value={el} key={el}>{el}</MenuItem>\r\n                            ))}\r\n                    </Select>\r\n                </FormControl>\r\n                <FormControl className={classes.currencyInput}>\r\n                    <TextField\r\n                        onChange={handleChangeInput}\r\n                        id={'from'}\r\n                        variant={'outlined'}\r\n                        value={fromValue}\r\n                        type=\"number\"\r\n                        label=\"Сумма\"\r\n                    />\r\n                </FormControl>\r\n\r\n            </div>\r\n            <div className={classes.cryptoInputBox}>\r\n                <FormControl className={classes.currencyType} variant='outlined'>\r\n                    <InputLabel id=\"grouped-select2\">Type</InputLabel>\r\n                    <Select\r\n                        labelId=\"grouped-select2\"\r\n                        value={toSelected}\r\n                        label={'Type'}\r\n                        onChange={handleChangeTo}\r\n                    >\r\n                        <MenuItem value=\"\">\r\n                            <em/>\r\n                        </MenuItem>\r\n                        {currencyList.map(el =>\r\n                            (\r\n                                <MenuItem value={el} key={el}>{el}</MenuItem>\r\n                            ))}\r\n                    </Select>\r\n\r\n                </FormControl>\r\n                <FormControl className={classes.currencyInput}>\r\n                    <TextField\r\n                        onChange={handleChangeInput}\r\n                        value={toValue}\r\n                        id={'to'}\r\n                        variant={'outlined'}\r\n                        type=\"number\"\r\n                        label=\"Сумма\"\r\n                    />\r\n                </FormControl>\r\n\r\n            </div>\r\n            <Result/>\r\n\r\n        </Paper>\r\n    );\r\n});\r\n\r\nexport default ConverterBlock;\r\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        table: {\r\n            minWidth: 650,\r\n        },\r\n        currencyIcon: {\r\n            width: 18,\r\n            height: 18,\r\n            borderRadius: 30,\r\n        },\r\n        redColumn: {\r\n            backgroundColor: '#d8ffc4',\r\n        },\r\n        greenColumn: {\r\n            backgroundColor: '#ffdada',\r\n        },\r\n        rowCurrency: {\r\n            cursor: 'pointer',\r\n        },\r\n    }),\r\n);\r\n\r\n","import React from 'react';\r\nimport {Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\r\nimport {useStyles} from \"./styles\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../Store/store\";\r\nimport {RequestStatusType} from \"../../Store/AppReducer\";\r\nimport clsx from \"clsx\";\r\n\r\n\r\nconst CryptoTable = (): JSX.Element => {\r\n    const loading = useSelector((state: AppRootStateType) => state.convert.status)\r\n    const items = useSelector((state: AppRootStateType) => state.convert.table)\r\n    const classes = useStyles()\r\n\r\n    if (loading === RequestStatusType.LOADING) {\r\n        return <div>load</div>\r\n    }\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell></TableCell>\r\n                        <TableCell align=\"left\">Name</TableCell>\r\n                        <TableCell align=\"left\">FullName</TableCell>\r\n                        <TableCell align=\"left\">Price</TableCell>\r\n                        <TableCell align=\"left\">volume24hour</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {!items.length\r\n                        ? <TableRow><TableCell align=\"left\">Load</TableCell></TableRow>\r\n                        : items.map((coin) => (\r\n                            <TableRow\r\n                                className={classes.rowCurrency}\r\n                                hover\r\n                                key={coin.name}>\r\n                                <TableCell><img className={classes.currencyIcon} src={coin.imgUrl} alt=\"Coin icon\"/></TableCell>\r\n                                <TableCell align=\"left\">{coin.fromSymbol}</TableCell>\r\n                                <TableCell align=\"left\">{coin.name}</TableCell>\r\n                                <TableCell\r\n                                    className={clsx({\r\n                                        [classes.greenColumn]: coin.changeValue && coin.changeValue > 0,\r\n                                        [classes.redColumn]: coin.changeValue && coin.changeValue < 0,\r\n                                    })}\r\n                                    align=\"left\">{coin.displayPrice}</TableCell>\r\n                                <TableCell align=\"left\">{coin.change24h}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nexport default CryptoTable;\r\n","import React, {useEffect} from 'react';\nimport {Container, Grid} from \"@material-ui/core\";\nimport {useStyles} from \"./styles\";\nimport ConverterBlock from \"../components/ConverterBlock/ConverterBlock\";\nimport CryptoTable from \"../components/CryptoTable/CryptoTable\";\nimport {useDispatch} from \"react-redux\";\nimport {fetchDataWithTable, initinalFetchData} from \"../Store/app-saga\";\n\nfunction App() {\n    const classes = useStyles()\n    const dispatch = useDispatch()\n\n    useEffect( () => {\n        dispatch(initinalFetchData())\n\n        const intervalId = setInterval(() => {\n            dispatch(fetchDataWithTable())\n        }, 20000)\n        return () => {\n            clearInterval(intervalId)\n        }\n    }, [])\n\n    return (\n        <Container className={classes.root} maxWidth=\"lg\">\n            <Grid container spacing={3}>\n                <Grid item xs={8}>\n                    <CryptoTable/>\n                </Grid>\n                <Grid item xs={4}>\n                    <ConverterBlock />\n                </Grid>\n            </Grid>\n        </Container>\n    );\n}\n\nexport default App;\n","import {appReducer} from \"./AppReducer\";\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {all} from 'redux-saga/effects'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport {appWatcherSaga} from \"./app-saga\";\r\nconst rootReducer = combineReducers({\r\n    convert: appReducer,\r\n})\r\n\r\n\r\nconst   sagaMiddleware = createSagaMiddleware();\r\nexport const store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\r\n\r\nsagaMiddleware.run(rootWatcher)\r\n\r\nfunction* rootWatcher () {\r\n    yield all([appWatcherSaga()])\r\n}\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Store/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}